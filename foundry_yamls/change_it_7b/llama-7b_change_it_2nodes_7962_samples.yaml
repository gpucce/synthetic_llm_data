max_seq_len: 2048
global_seed: 17

# Run Name
run_name: llama-7b_change_it_monolithic_7962_samples # If left blank, will be read from env var $RUN_NAME

model:
  name: hf_causal_lm
  pretrained: true
  pretrained_model_name_or_path: /leonardo_scratch/large/userexternal/gpuccett/models/hf_llama/llama-2-7b-hf
  init_device: mixed
  use_flash_attention_2: True
  # config_overrides:
    # max_position_embeddings: ${max_seq_len}
    # attn_config:
      # attn_impl: triton
      # Set this to `true` if using `train_loader.dataset.packing_ratio` below
      # attn_uses_sequence_id: false

# Tokenizer
tokenizer:
  name: /leonardo_scratch/large/userexternal/gpuccett/models/hf_llama/llama-2-7b-hf
  kwargs:
    model_max_length: ${max_seq_len}


# Dataloaders
train_loader:
  name: finetuning
  dataset:
    hf_name: json
    hf_kwargs:
      data_files: /leonardo_scratch/large/userexternal/gpuccett/data/CHANGE-it/train_7962_samples.json
    preprocessing_fn: preprocessing:change_it_preprocessing_function
    split: train
    max_seq_len: ${max_seq_len}
    allow_pad_trimming: false
    decoder_only_format: true
    # # Use `python llmfoundry/data/packing.py --yaml-path /path/to/this/yaml/ ...`
    # # to profile this run's optimal packing_ratio as it depends on GPU count,
    # # batch size, sequence length
    # packing_ratio:
    shuffle: true
  drop_last: true
  num_workers: 8
  pin_memory: false
  prefetch_factor: 2
  persistent_workers: true
  timeout: 0

# eval_loader:
#   name: finetuning
#   dataset:
#     hf_name: json
#     hf_kwargs:
#       data_files: 
#     split: test
#     max_seq_len: ${max_seq_len}
#     allow_pad_trimming: false
#     decoder_only_format: true
#     # packing_ratio:
#     shuffle: false
#   drop_last: true
#   num_workers: 8
#   pin_memory: false
#   prefetch_factor: 2
#   persistent_workers: true
#   timeout: 0

# Optimization
scheduler:
  name: linear_decay_with_warmup  # linear no warmup is HF default which dolly used
  t_warmup: 30ba  # add some warmup though, seems to help with MPT
  alpha_f: 0

optimizer:
  # Based on Dolly
  name: decoupled_adamw
  lr: 1.0e-5
  betas:
  - 0.9
  - 0.999
  eps: 1.0e-8
  weight_decay: 0

algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0

max_duration: 3ep  # 2-3 epochs seems like the sweet spot
eval_interval: 1
# eval_subset_num_batches: -1
# eval_first: true
global_train_batch_size: 64  # somewhere in the 6-8 * numgpus range seems good

# System
seed: ${global_seed}
device_eval_batch_size: 4
device_train_microbatch_size: 4
# device_train_microbatch_size: auto
precision: amp_bf16

# FSDP
fsdp_config:
  sharding_strategy: FULL_SHARD
  mixed_precision: PURE
  activation_checkpointing: true
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true
  verbose: true
  sync_module_states: true
  state_dict_type: sharded

# Logging
progress_bar: false
log_to_console: true
console_log_interval: 20ba

callbacks:
  speed_monitor:
    window_size: 10
  mono_ckpt_saver:
    save_folder: /leonardo_scratch/large/userexternal/gpuccett/models/hf_llama/{run_name}/checkpoints
    batch_interval: 497
    overwrite: true
  lr_monitor: {}
  memory_monitor: {}
  runtime_estimator: {}

loggers:
  wandb:
    project: llm_ita
    name: change_it_7b_4nodes
    entity: gpucce

# Checkpoint to local filesystem or remote object store
save_interval: 1ep
# save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
save_folder: /leonardo_scratch/large/userexternal/gpuccett/models/hf_llama/{run_name}/checkpoints
# save_folder: s3://my-bucket/my-folder/{run_name}/checkpoints
